[{"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\index.js":"1","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\store.js":"2","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\App.js":"3","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\reducers\\rootReducer.js":"4","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\actions\\post.js":"5","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\PostList.jsx":"6","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\AddPostForm.jsx":"7","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\reducers\\post.js":"8","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\actions\\types.js":"9","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\api\\index.js":"10","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\Post.jsx":"11","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\PostDetails.jsx":"12"},{"size":299,"mtime":1610554264238,"results":"13","hashOfConfig":"14"},{"size":348,"mtime":1610554264240,"results":"15","hashOfConfig":"14"},{"size":2318,"mtime":1610554264228,"results":"16","hashOfConfig":"14"},{"size":178,"mtime":1610554264239,"results":"17","hashOfConfig":"14"},{"size":1216,"mtime":1610555874347,"results":"18","hashOfConfig":"14"},{"size":1787,"mtime":1610554264234,"results":"19","hashOfConfig":"14"},{"size":5043,"mtime":1610554264233,"results":"20","hashOfConfig":"14"},{"size":974,"mtime":1610555398836,"results":"21","hashOfConfig":"14"},{"size":178,"mtime":1610554955584,"results":"22","hashOfConfig":"14"},{"size":406,"mtime":1610555277025,"results":"23","hashOfConfig":"14"},{"size":2031,"mtime":1610554264233,"results":"24","hashOfConfig":"14"},{"size":3068,"mtime":1610555746863,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"n0gdry",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\index.js",[],["53","54"],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\store.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\App.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\reducers\\rootReducer.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\actions\\post.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\PostList.jsx",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\AddPostForm.jsx",["55"],"import React, { useState } from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, TextField, Select, Input, MenuItem, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText, DialogContentTitle } from \"@material-ui/core\";\r\nimport FileBase64 from \"react-file-base64\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { createPost } from \"../actions/post\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    textField: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst tags = [\"fun\", \"programming\", \"health\", \"science\"];\r\n\r\nconst postSchema = yup.object().shape({\r\n    title: yup.string().required(),\r\n    subtitle: yup.string().required(),\r\n    content: yup.string().min(5).required(),\r\n    tag: yup.mixed().oneOf(tags)\r\n\r\n});\r\n\r\nconst AddPostForm = ({ open, handleClose }) => {\r\n\r\n    const [file, setFile] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { register, handleSubmit, control, errors, reset } = useForm({\r\n        resolver: yupResolver(postSchema)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        console.log({ ...data, file });\r\n        dispatch(createPost({ ...data, image: file }));\r\n        clearForm();\r\n    }\r\n\r\n    const clearForm = () => {\r\n        reset();\r\n        handleClose();\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>Yeni Yazı Oluştur</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>Yeni bir yazı eklemek için aşağıdaki formu doldurunuz.</DialogContentText>\r\n                <div className={classes.root}>\r\n                    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit()}>\r\n                        <TextField\r\n                            id=\"title\"\r\n                            label=\"Başlık\"\r\n                            name=\"title\"\r\n                            variant=\"outlined\"\r\n                            className={classes.textField}\r\n                            size=\"small\"\r\n                            inputRef={register}\r\n                            error={errors.title ? true : false}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            id=\"subtitle\"\r\n                            label=\"Alt Başlık\"\r\n                            name=\"subtitle\"\r\n                            variant=\"outlined\"\r\n                            className={classes.textField}\r\n                            size=\"small\"\r\n                            inputRef={register}\r\n                            error={errors.subtitle ? true : false}\r\n                            fullWidth\r\n                        />\r\n                        <Controller\r\n                            as={\r\n                                <Select\r\n                                    input={<Input />}\r\n                                    className={classes.textField}\r\n                                    fullWidth\r\n                                >\r\n                                    {tags.map((tag, index) => (\r\n                                        <MenuItem key={index} value={tag}>\r\n                                            {tag}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            }\r\n                            name=\"tag\"\r\n                            control={control}\r\n                            error={errors.tag ? true : false}\r\n                            defaultValue={tags[0]}\r\n                        />\r\n\r\n                        <TextField\r\n                            id=\"content\"\r\n                            label=\"İçerik\"\r\n                            name=\"content\"\r\n                            variant=\"outlined\"\r\n                            className={classes.textField}\r\n                            size=\"small\"\r\n                            inputRef={register}\r\n                            error={errors.content ? true : false}\r\n                            fullWidth\r\n                            multiline\r\n                            rows={10}\r\n                        />\r\n                        <FileBase64 multiple={false} onDone={({ base64 }) => setFile(base64)} />\r\n                    </form>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button color=\"inherit\" onClick={clearForm} > Vazgeç</Button>\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={() => handleSubmit(onSubmit)()}\r\n\r\n                >Yayınla</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AddPostForm;","C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\reducers\\post.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\actions\\types.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\api\\index.js",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\Post.jsx",[],"C:\\Users\\MONSTER\\Desktop\\Blogify-MERN\\ui\\src\\components\\PostDetails.jsx",["56"],"import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography, Paper, Divider, Button, Chip } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { fetchSinglePost, deletePost } from \"../actions/post\";\r\nimport noImage from \"../images/noimage.svg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    marginBottom: theme.spacing(8),\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  content: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  image: {\r\n    width: \"100%\",\r\n    borderRadius: 5,\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n  chip: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst PostDetails = ({ history, location, match }) => {\r\n  const { id } = match.params;\r\n  const dispatch = useDispatch();\r\n\r\n  const currentPost = useSelector((state) => state.posts.currentPost);\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchSinglePost(id));\r\n  }, [dispatch, id]);\r\n\r\n  const convertRelativeTime = (date) => {\r\n    return moment(date).fromNow();\r\n  };\r\n\r\n  const removePost = () => {\r\n    dispatch(deletePost(currentPost._id));\r\n    history.push(\"/posts\");\r\n  };\r\n\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper className={classes.paper} elevation={0}>\r\n        <div>\r\n          <div className={classes.header}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              {currentPost?.title}\r\n            </Typography>\r\n            <div>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                startIcon={<EditIcon />}\r\n              >\r\n                Düzenle\r\n              </Button>{\" \"}\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                startIcon={<DeleteIcon />}\r\n                onClick={removePost}\r\n                >\r\n                Sil\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Divider />\r\n          <Typography variant=\"overline\" gutterBottom>\r\n            {currentPost?.subtitle}\r\n          </Typography>\r\n          <Typography variant=\"caption\" component=\"p\" gutterBottom>\r\n            {convertRelativeTime(currentPost?.createdAt)} by Kubilay\r\n          </Typography>\r\n          <Chip\r\n            label={`# ${currentPost?.tag}`}\r\n            variant=\"outlined\"\r\n            className={classes.chip}\r\n          />\r\n          <div className={classes.content}>\r\n            <img\r\n              src={currentPost?.image || noImage}\r\n              alt=\"Post\"\r\n              className={classes.image}\r\n            />\r\n            <Typography variant=\"body1\" gutterBottom>\r\n              {currentPost?.content}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      \r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default PostDetails;\r\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":124,"nodeType":"63","messageId":"64","endLine":3,"endColumn":142},{"ruleId":"61","severity":1,"message":"65","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'DialogContentTitle' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]